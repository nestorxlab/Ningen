from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer

bot = ChatBot(
    'PigTeller',
    preprocessors=[
        'chatterbot.preprocessors.clean_whitespace',
        'chatterbot.preprocessors.convert_to_ascii'
    ],
    storage_adapter='chatterbot.storage.SQLStorageAdapter',
    input_adapter='chatterbot.input.TerminalAdapter',
    output_adapter='chatterbot.output.TerminalAdapter',
    logic_adapters=[        # Logic adapters determine the way of choosing an answer based in confidence generated by different parameters
        {
            "import_path": "chatterbot.logic.BestMatch",        # Best match follows a linear structure from the training conversations to figure out the possible next word
            "statement_comparison_function": "chatterbot.comparisons.levenshtein_distance",
            "response_selection_method": "chatterbot.response_selection.get_first_response"
        },
        {
            'import_path': 'chatterbot.logic.SpecificResponseAdapter',  # Answer a specific String, to a specific question
            'input_text': 'Solve',
            'output_text': 'et Coagula'
        },
        {
            'import_path': 'chatterbot.logic.LowConfidenceAdapter', # Answer a specific String, to an unknown (Low confidence) question
            'threshold': 0.65,
            'default_response': 'Whaaaaaat, could you repeat again please?'
        }
    ],
    database='./database.sqlite3'   # All the training data gets permanently stored in this database (for reseting a Bot brain, delete this file)
)

botTwoBrain = [
    "There",
    "Was",
    "Enough!",
    "Food",
    "for",
    "whole",
    "Pig",
    "Villagers",
]

SecondTale = [
    "There",
    "is",
    "No",
    "Food",
    "for",
    "any",
    "Pig",
    "Villagers",
]
bot.set_trainer(ListTrainer)

bot.train(botTwoBrain)
bot.train(SecondTale)
response2 = bot.get_response("Here thy come")
print(response2)


while True:
    try:
     bot_input = bot.get_response(None)

    except(KeyboardInterrupt, EOFError, SystemExit):
        break